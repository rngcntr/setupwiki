{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SETUP WIKI This is a collection of various setup guides. Disk Encryption LUKS with passphrase LUKS with keyfile Raspberry Pi Setup for headless systems OpenVPN Server .Dotfiles Dotfile Setup Backup Borg Backup","title":"SETUP WIKI"},{"location":"#setup-wiki","text":"This is a collection of various setup guides.","title":"SETUP WIKI"},{"location":"#disk-encryption","text":"LUKS with passphrase LUKS with keyfile","title":"Disk Encryption"},{"location":"#raspberry-pi","text":"Setup for headless systems OpenVPN Server","title":"Raspberry Pi"},{"location":"#dotfiles","text":"Dotfile Setup","title":".Dotfiles"},{"location":"#backup","text":"Borg Backup","title":"Backup"},{"location":"license/","text":"Attribution-ShareAlike 4.0 International ======================================================================= Creative Commons Corporation (\"Creative Commons\") is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an \"as-is\" basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible. Using Creative Commons Public Licenses Creative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses. Considerations for licensors: Our public licenses are intended for use by those authorized to give the public permission to use material in ways otherwise restricted by copyright and certain other rights. Our licenses are irrevocable. Licensors should read and understand the terms and conditions of the license they choose before applying it. Licensors should also secure all rights necessary before applying our licenses so that the public can reuse the material as expected. Licensors should clearly mark any material not subject to the license. This includes other CC- licensed material, or material used under an exception or limitation to copyright. More considerations for licensors: wiki.creativecommons.org/Considerations_for_licensors Considerations for the public: By using one of our public licenses, a licensor grants the public permission to use the licensed material under specified terms and conditions. If the licensor's permission is not necessary for any reason--for example, because of any applicable exception or limitation to copyright--then that use is not regulated by the license. Our licenses grant only permissions under copyright and certain other rights that a licensor has authority to grant. Use of the licensed material may still be restricted for other reasons, including because others have copyright or other rights in the material. A licensor may make special requests, such as asking that all changes be marked or described. Although not required by our licenses, you are encouraged to respect those requests where reasonable. More_considerations for the public: wiki.creativecommons.org/Considerations_for_licensees ======================================================================= Creative Commons Attribution-ShareAlike 4.0 International Public License By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-ShareAlike 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions. Section 1 -- Definitions. a. Adapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image. b. Adapter's License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License. c. BY-SA Compatible License means a license listed at creativecommons.org/compatiblelicenses, approved by Creative Commons as essentially the equivalent of this Public License. d. Copyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights. e. Effective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements. f. Exceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material. g. License Elements means the license attributes listed in the name of a Creative Commons Public License. The License Elements of this Public License are Attribution and ShareAlike. h. Licensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License. i. Licensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license. j. Licensor means the individual(s) or entity(ies) granting rights under this Public License. k. Share means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them. l. Sui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world. m. You means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning. Section 2 -- Scope. a. License grant. 1. Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to: a. reproduce and Share the Licensed Material, in whole or in part; and b. produce, reproduce, and Share Adapted Material. 2. Exceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions. 3. Term. The term of this Public License is specified in Section 6(a). 4. Media and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a) (4) never produces Adapted Material. 5. Downstream recipients. a. Offer from the Licensor -- Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License. b. Additional offer from the Licensor -- Adapted Material. Every recipient of Adapted Material from You automatically receives an offer from the Licensor to exercise the Licensed Rights in the Adapted Material under the conditions of the Adapter's License You apply. c. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material. 6. No endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i). b. Other rights. 1. Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise. 2. Patent and trademark rights are not licensed under this Public License. 3. To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties. Section 3 -- License Conditions. Your exercise of the Licensed Rights is expressly made subject to the following conditions. a. Attribution. 1. If You Share the Licensed Material (including in modified form), You must: a. retain the following if it is supplied by the Licensor with the Licensed Material: i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated); ii. a copyright notice; iii. a notice that refers to this Public License; iv. a notice that refers to the disclaimer of warranties; v. a URI or hyperlink to the Licensed Material to the extent reasonably practicable; b. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and c. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License. 2. You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information. 3. If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable. b. ShareAlike. In addition to the conditions in Section 3(a), if You Share Adapted Material You produce, the following conditions also apply. 1. The Adapter's License You apply must be a Creative Commons license with the same License Elements, this version or later, or a BY-SA Compatible License. 2. You must include the text of, or the URI or hyperlink to, the Adapter's License You apply. You may satisfy this condition in any reasonable manner based on the medium, means, and context in which You Share Adapted Material. 3. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter's License You apply. Section 4 -- Sui Generis Database Rights. Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material: a. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database; b. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material, including for purposes of Section 3(b); and c. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database. For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights. Section 5 -- Disclaimer of Warranties and Limitation of Liability. a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU. b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES, COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR IN PART, THIS LIMITATION MAY NOT APPLY TO YOU. c. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability. Section 6 -- Term and Termination. a. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically. b. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates: 1. automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or 2. upon express reinstatement by the Licensor. For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License. c. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License. d. Sections 1, 5, 6, 7, and 8 survive termination of this Public License. Section 7 -- Other Terms and Conditions. a. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed. b. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License. Section 8 -- Interpretation. a. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License. b. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions. c. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor. d. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority. ======================================================================= Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the \u201cLicensor.\u201d The text of the Creative Commons public licenses is dedicated to the public domain under the CC0 Public Domain Dedication. Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark \"Creative Commons\" or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses. Creative Commons may be contacted at creativecommons.org.","title":"License"},{"location":"Backup/borg/","text":"Borg Backup ( source ) Step-by-step guide to using borg as a tool for backups across multiple devices. I'll use a client-server approach where the server stores backups of multiple clients. Partition the physical drive and create a filesystem ( source ) Find the device name of your hard drive first using lsblk or parted -l . The name is in the format sdX where X is a lowercase letter. Create a new primary partition on this device using parted . When asked, confirm with Yes . # parted /dev/sdX/ (parted) mklabel gpt (parted) mkpart primary 1 -1 (parted) quit Use mkfs.ext4 to format the partition as ext4. Optionally, add a label by passing -L to the command. I use the label backup . # mkfs.ext4 -L backup /dev/sdX1 This process may take a little while. Verify it's success afterwards by checking lsblk --fs . Mounting the partition at boot time In order to mount the filesystem each time our server boots, edit the file /etc/fstab . In this case we add a line referencing the UUID found in lsblk --fs and mount it as ext4 to /mnt/backup . UUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx /mnt/backup ext4 defaults 0 2 Now reboot or manually mount the filesystem. # /mnt/backup # mount -a Create a backup user and set it's home directory Add a user on the server who will have access to borg. Set the home directory to the backup partition. # useradd -m borg # passwd borg # usermod -d /mnt/backup/borg -m borg Allow ssh login as borg user On each client device, create a new ssh identity for borg and copy the public key to the server. ssh-keygen -t ed25519 ssh-copy-id -i \u00abpath/to/key\u00bb borg@\u00abserver\u00bb Restrict borg user access In case a single machine is compromised, an attacker will have acces to the borg server and will be able to delete all backups and control the server. To avoid this, we can restrict ssh access to only allow the borg command. Therefore, we log in as borg on our server and edit the file .ssh/authorized_keys . For each client, find the corresponding line and expand it by specifying command=\"...\" as seen below: command=\"borg serve --restrict-to-path ~/repo/\u00abclient\u00bb\" ssh-ed25519 \u00abkey_fingerprint\u00bb \u00abuser\u00bb@\u00abclient\u00bb Note that an attacker is still able to run borg prune and thereby delete existing backups. In order to avoid this, we can additionaly specify the --append-only flag. In this case we will not be able to run borg prune remotely anymore. To delete old backups, we will need physical access to the machine. command=\"borg serve --restrict-to-path ~/repo/\u00abclient\u00bb --append-only\" ssh-ed25519 \u00abkey_fingerprint\u00bb \u00abuser\u00bb@\u00abclient\u00bb Create a borg repository As borg on \u00abserver\u00bb : mkdir -p ~/repo/\u00abclient\u00bb On client: borg init --encryption=repokey borg@\u00abserver\u00bb:~/repo/\u00abclient\u00bb Export the repository key and store it in a safe location (e.g. password safe) borg key export borg@\u00abserver\u00bb:~/repo/\u00abclient\u00bb ./borg-key-\u00abclient\u00bb Backup a single file or directory # borg create -s --progress borg@\u00abserver\u00bb:~/repo/\u00abclient\u00bb::\u00abarchive\u00bb /path/to/file Backup an entire filesystem ( source ) Locations you want to exclude: /dev /lost+found /mnt /media /proc /run /sys /tmp # borg create --progress --verbose --stats --exclude-caches --exclude '/dev/*' \\ --exclude '/lost+found/*' \\ --exclude '/mnt/*' \\ --exclude '/media/*' \\ --exclude '/proc/*' \\ --exclude '/run/*' \\ --exclude '/sys/*' \\ --exclude '/tmp/*' \\ --exclude re:/\\\\.cache/ \\ --exclude re:/\\\\.ccache/ \\ borg@\u00abserver\u00bb:~/repo/\u00abclient\u00bb::\u00abclient\u00bb-\u00abdate\u00bb / Restore a backup Delete an archive # borg delete borg@\u00abserver\u00bb:~/repo/\u00abclient\u00bb::\u00abarchive\u00bb Delete old archives # borg prune --verbose --stats --progress --list \\ --keep-daily=14 \\ --keep-weekly=8 \\ --keep-monthly=12 \\ --keep-yearly=10 \\ borg@\u00abserver\u00bb:~/repo/\u00abclient\u00bb","title":"Borg Backup"},{"location":"Backup/borg/#borg-backup","text":"( source ) Step-by-step guide to using borg as a tool for backups across multiple devices. I'll use a client-server approach where the server stores backups of multiple clients.","title":"Borg Backup"},{"location":"Backup/borg/#partition-the-physical-drive-and-create-a-filesystem","text":"( source ) Find the device name of your hard drive first using lsblk or parted -l . The name is in the format sdX where X is a lowercase letter. Create a new primary partition on this device using parted . When asked, confirm with Yes . # parted /dev/sdX/ (parted) mklabel gpt (parted) mkpart primary 1 -1 (parted) quit Use mkfs.ext4 to format the partition as ext4. Optionally, add a label by passing -L to the command. I use the label backup . # mkfs.ext4 -L backup /dev/sdX1 This process may take a little while. Verify it's success afterwards by checking lsblk --fs .","title":"Partition the physical drive and create a filesystem"},{"location":"Backup/borg/#mounting-the-partition-at-boot-time","text":"In order to mount the filesystem each time our server boots, edit the file /etc/fstab . In this case we add a line referencing the UUID found in lsblk --fs and mount it as ext4 to /mnt/backup . UUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx /mnt/backup ext4 defaults 0 2 Now reboot or manually mount the filesystem. # /mnt/backup # mount -a","title":"Mounting the partition at boot time"},{"location":"Backup/borg/#create-a-backup-user-and-set-its-home-directory","text":"Add a user on the server who will have access to borg. Set the home directory to the backup partition. # useradd -m borg # passwd borg # usermod -d /mnt/backup/borg -m borg","title":"Create a backup user and set it's home directory"},{"location":"Backup/borg/#allow-ssh-login-as-borg-user","text":"On each client device, create a new ssh identity for borg and copy the public key to the server. ssh-keygen -t ed25519 ssh-copy-id -i \u00abpath/to/key\u00bb borg@\u00abserver\u00bb","title":"Allow ssh login as borg user"},{"location":"Backup/borg/#restrict-borg-user-access","text":"In case a single machine is compromised, an attacker will have acces to the borg server and will be able to delete all backups and control the server. To avoid this, we can restrict ssh access to only allow the borg command. Therefore, we log in as borg on our server and edit the file .ssh/authorized_keys . For each client, find the corresponding line and expand it by specifying command=\"...\" as seen below: command=\"borg serve --restrict-to-path ~/repo/\u00abclient\u00bb\" ssh-ed25519 \u00abkey_fingerprint\u00bb \u00abuser\u00bb@\u00abclient\u00bb Note that an attacker is still able to run borg prune and thereby delete existing backups. In order to avoid this, we can additionaly specify the --append-only flag. In this case we will not be able to run borg prune remotely anymore. To delete old backups, we will need physical access to the machine. command=\"borg serve --restrict-to-path ~/repo/\u00abclient\u00bb --append-only\" ssh-ed25519 \u00abkey_fingerprint\u00bb \u00abuser\u00bb@\u00abclient\u00bb","title":"Restrict borg user access"},{"location":"Backup/borg/#create-a-borg-repository","text":"As borg on \u00abserver\u00bb : mkdir -p ~/repo/\u00abclient\u00bb On client: borg init --encryption=repokey borg@\u00abserver\u00bb:~/repo/\u00abclient\u00bb Export the repository key and store it in a safe location (e.g. password safe) borg key export borg@\u00abserver\u00bb:~/repo/\u00abclient\u00bb ./borg-key-\u00abclient\u00bb","title":"Create a borg repository"},{"location":"Backup/borg/#backup-a-single-file-or-directory","text":"# borg create -s --progress borg@\u00abserver\u00bb:~/repo/\u00abclient\u00bb::\u00abarchive\u00bb /path/to/file","title":"Backup a single file or directory"},{"location":"Backup/borg/#backup-an-entire-filesystem","text":"( source ) Locations you want to exclude: /dev /lost+found /mnt /media /proc /run /sys /tmp # borg create --progress --verbose --stats --exclude-caches --exclude '/dev/*' \\ --exclude '/lost+found/*' \\ --exclude '/mnt/*' \\ --exclude '/media/*' \\ --exclude '/proc/*' \\ --exclude '/run/*' \\ --exclude '/sys/*' \\ --exclude '/tmp/*' \\ --exclude re:/\\\\.cache/ \\ --exclude re:/\\\\.ccache/ \\ borg@\u00abserver\u00bb:~/repo/\u00abclient\u00bb::\u00abclient\u00bb-\u00abdate\u00bb /","title":"Backup an entire filesystem"},{"location":"Backup/borg/#restore-a-backup","text":"","title":"Restore a backup"},{"location":"Backup/borg/#delete-an-archive","text":"# borg delete borg@\u00abserver\u00bb:~/repo/\u00abclient\u00bb::\u00abarchive\u00bb","title":"Delete an archive"},{"location":"Backup/borg/#delete-old-archives","text":"# borg prune --verbose --stats --progress --list \\ --keep-daily=14 \\ --keep-weekly=8 \\ --keep-monthly=12 \\ --keep-yearly=10 \\ borg@\u00abserver\u00bb:~/repo/\u00abclient\u00bb","title":"Delete old archives"},{"location":"Dotfiles/setup/","text":"Dotfiles","title":"Dotfiles"},{"location":"Dotfiles/setup/#dotfiles","text":"","title":"Dotfiles"},{"location":"Full_Disk_Encryption/luks_crypt_keyfile/","text":"LUKS Crypt ( source ) In this guide, I'm going to setup a keyfile-encrypted LUKS partition. I will be using a single, max-size partition on a single physical device. The mountpoint can be determined by running lsblk . Partition the physical device parted /dev/sdX (parted) mklabel gpt (parted) mkpart primary 1 -1 (parted) quit Create the key file Before we go further, let's create our 2048-bit key file first. I'm going to install it /root/backup.key sudo dd if=/dev/urandom of=/root/backup.key bs=1024 count=2 sudo chmod 0400 /root/backup.key Create LUKS partition In my case, /dev/sdX1 was created by parted . Create the LUKS partition with our key file now. cryptsetup luksFormat /dev/sdX1 /root/backup.key Associating our key with the LUKS partition will allow us to automount it later and prevent us from ever seeing a password prompt. cryptsetup luksAddKey /dev/sdX1 /root/backup.key --key-file=/root/backup.key Initialize the LUKS partition Before we can start using our LUKS partition, we have to size it properly and format it first. In order to do that, we will first use luksOpen which creates an IO backing device that allows us to interact with the partition. I'll call my device backup ; you can call yours whatever you want. cryptsetup luksOpen /dev/sdX1 backup --key-file=/root/backup.key the LUKS mapping device will now be available at /dev/mapper/backup Size the LUKS partition When using resize without any additional vars, it will use the max size of the underlying partition. cryptsetup resize backup Format the LUKS partition I'm going to use ext4 ; you can use whatever you want. mkfs.ext4 /dev/mapper/backup Create a mount point I'll create a mount point at /backup sudo mkdir -p /backup sudo chmod 755 /backup Mount the LUKS mapping device mount /dev/mapper/backup /backup df /backup Automountable To avoid the hassle of mounting are encrypted volume manually, we can set it up such that it automounts using the specified key file. First you have to get the UUID for your partition. ls -l /dev/disk/by-uuid Find the UUID that links to your disk. In my case, it is 651322a-8171-49b4-9707-a96698ec826e . export UUID=\"651322a-8171-49b4-9707-a96698ec826e\" sudo echo \"backup UUID=${UUID} /root/backup.key luks\" >> /etc/crypttab Finally, specify the automount sudo echo \"/dev/mapper/backup /backup auto\" >> /etc/fstab Mount stuff! sudo mount -a","title":"Luks crypt keyfile"},{"location":"Full_Disk_Encryption/luks_crypt_keyfile/#luks-crypt","text":"( source ) In this guide, I'm going to setup a keyfile-encrypted LUKS partition. I will be using a single, max-size partition on a single physical device. The mountpoint can be determined by running lsblk .","title":"LUKS Crypt"},{"location":"Full_Disk_Encryption/luks_crypt_keyfile/#partition-the-physical-device","text":"parted /dev/sdX (parted) mklabel gpt (parted) mkpart primary 1 -1 (parted) quit","title":"Partition the physical device"},{"location":"Full_Disk_Encryption/luks_crypt_keyfile/#create-the-key-file","text":"Before we go further, let's create our 2048-bit key file first. I'm going to install it /root/backup.key sudo dd if=/dev/urandom of=/root/backup.key bs=1024 count=2 sudo chmod 0400 /root/backup.key","title":"Create the key file"},{"location":"Full_Disk_Encryption/luks_crypt_keyfile/#create-luks-partition","text":"In my case, /dev/sdX1 was created by parted . Create the LUKS partition with our key file now. cryptsetup luksFormat /dev/sdX1 /root/backup.key Associating our key with the LUKS partition will allow us to automount it later and prevent us from ever seeing a password prompt. cryptsetup luksAddKey /dev/sdX1 /root/backup.key --key-file=/root/backup.key","title":"Create LUKS partition"},{"location":"Full_Disk_Encryption/luks_crypt_keyfile/#initialize-the-luks-partition","text":"Before we can start using our LUKS partition, we have to size it properly and format it first. In order to do that, we will first use luksOpen which creates an IO backing device that allows us to interact with the partition. I'll call my device backup ; you can call yours whatever you want. cryptsetup luksOpen /dev/sdX1 backup --key-file=/root/backup.key the LUKS mapping device will now be available at /dev/mapper/backup","title":"Initialize the LUKS partition"},{"location":"Full_Disk_Encryption/luks_crypt_keyfile/#size-the-luks-partition","text":"When using resize without any additional vars, it will use the max size of the underlying partition. cryptsetup resize backup","title":"Size the LUKS partition"},{"location":"Full_Disk_Encryption/luks_crypt_keyfile/#format-the-luks-partition","text":"I'm going to use ext4 ; you can use whatever you want. mkfs.ext4 /dev/mapper/backup","title":"Format the LUKS partition"},{"location":"Full_Disk_Encryption/luks_crypt_keyfile/#create-a-mount-point","text":"I'll create a mount point at /backup sudo mkdir -p /backup sudo chmod 755 /backup","title":"Create a mount point"},{"location":"Full_Disk_Encryption/luks_crypt_keyfile/#mount-the-luks-mapping-device","text":"mount /dev/mapper/backup /backup df /backup","title":"Mount the LUKS mapping device"},{"location":"Full_Disk_Encryption/luks_crypt_keyfile/#automountable","text":"To avoid the hassle of mounting are encrypted volume manually, we can set it up such that it automounts using the specified key file. First you have to get the UUID for your partition. ls -l /dev/disk/by-uuid Find the UUID that links to your disk. In my case, it is 651322a-8171-49b4-9707-a96698ec826e . export UUID=\"651322a-8171-49b4-9707-a96698ec826e\" sudo echo \"backup UUID=${UUID} /root/backup.key luks\" >> /etc/crypttab Finally, specify the automount sudo echo \"/dev/mapper/backup /backup auto\" >> /etc/fstab Mount stuff! sudo mount -a","title":"Automountable"},{"location":"Full_Disk_Encryption/luks_crypt_password/","text":"LUKS Crypt ( source ) In this guide, I'm going to setup a keyfile-encrypted LUKS partition. I will be using a single, max-size partition on a single physical device. The mountpoint can be determined by running lsblk . Partition the physical device sudo parted /dev/sdX (parted) mklabel gpt (parted) mkpart primary 1 -1 (parted) quit Create LUKS partition In my case, /dev/sdX1 was created by parted . Create the LUKS partition with our key file now. sudo cryptsetup luksFormat --type luks2 /dev/sdX1 Access the LUKS partition To gain access to the encrypted partition, unlock it with the device mapper, using: sudo cryptsetup open /dev/sdX1 backup Size the LUKS partition When using resize without any additional vars, it will use the max size of the underlying partition. sudo cryptsetup resize backup Format the LUKS partition I'm going to use ext4 ; you can use whatever you want. sudo mkfs.ext4 /dev/mapper/backup Create a mount point I'll create a mount point at /backup sudo mkdir -p /backup sudo chmod 755 /backup Mount the LUKS mapping device sudo cryptsetup open /dev/sdX1 backup sudo mount /dev/mapper/backup /backup To check the status, use: df /backup Unmount the LUKS mapping device sudo unmount /backup cryptsetup close backup Automountable To avoid the hassle of mounting are encrypted volume manually, we can set it up such that it automounts using the specified key file. First you have to get the UUID for your partition. ls -l /dev/disk/by-uuid Find the UUID that links to your disk. In my case, it is 651322a-8171-49b4-9707-a96698ec826e . export UUID=\"651322a-8171-49b4-9707-a96698ec826e\" sudo echo \"backup UUID=${UUID} none luks,timeout=180\" >> /etc/crypttab Finally, specify the automount sudo echo \"/dev/mapper/backup /backup auto defaults,errors=remount-ro 0 2\" >> /etc/fstab Mount stuff! sudo mount -a","title":"LUKS Crypt"},{"location":"Full_Disk_Encryption/luks_crypt_password/#luks-crypt","text":"( source ) In this guide, I'm going to setup a keyfile-encrypted LUKS partition. I will be using a single, max-size partition on a single physical device. The mountpoint can be determined by running lsblk .","title":"LUKS Crypt"},{"location":"Full_Disk_Encryption/luks_crypt_password/#partition-the-physical-device","text":"sudo parted /dev/sdX (parted) mklabel gpt (parted) mkpart primary 1 -1 (parted) quit","title":"Partition the physical device"},{"location":"Full_Disk_Encryption/luks_crypt_password/#create-luks-partition","text":"In my case, /dev/sdX1 was created by parted . Create the LUKS partition with our key file now. sudo cryptsetup luksFormat --type luks2 /dev/sdX1","title":"Create LUKS partition"},{"location":"Full_Disk_Encryption/luks_crypt_password/#access-the-luks-partition","text":"To gain access to the encrypted partition, unlock it with the device mapper, using: sudo cryptsetup open /dev/sdX1 backup","title":"Access the LUKS partition"},{"location":"Full_Disk_Encryption/luks_crypt_password/#size-the-luks-partition","text":"When using resize without any additional vars, it will use the max size of the underlying partition. sudo cryptsetup resize backup","title":"Size the LUKS partition"},{"location":"Full_Disk_Encryption/luks_crypt_password/#format-the-luks-partition","text":"I'm going to use ext4 ; you can use whatever you want. sudo mkfs.ext4 /dev/mapper/backup","title":"Format the LUKS partition"},{"location":"Full_Disk_Encryption/luks_crypt_password/#create-a-mount-point","text":"I'll create a mount point at /backup sudo mkdir -p /backup sudo chmod 755 /backup","title":"Create a mount point"},{"location":"Full_Disk_Encryption/luks_crypt_password/#mount-the-luks-mapping-device","text":"sudo cryptsetup open /dev/sdX1 backup sudo mount /dev/mapper/backup /backup To check the status, use: df /backup","title":"Mount the LUKS mapping device"},{"location":"Full_Disk_Encryption/luks_crypt_password/#unmount-the-luks-mapping-device","text":"sudo unmount /backup cryptsetup close backup","title":"Unmount the LUKS mapping device"},{"location":"Full_Disk_Encryption/luks_crypt_password/#automountable","text":"To avoid the hassle of mounting are encrypted volume manually, we can set it up such that it automounts using the specified key file. First you have to get the UUID for your partition. ls -l /dev/disk/by-uuid Find the UUID that links to your disk. In my case, it is 651322a-8171-49b4-9707-a96698ec826e . export UUID=\"651322a-8171-49b4-9707-a96698ec826e\" sudo echo \"backup UUID=${UUID} none luks,timeout=180\" >> /etc/crypttab Finally, specify the automount sudo echo \"/dev/mapper/backup /backup auto defaults,errors=remount-ro 0 2\" >> /etc/fstab Mount stuff! sudo mount -a","title":"Automountable"},{"location":"Raspberry_Pi/openvpn/","text":"OpenVPN on a Raspberry Pi ( source ) Create an openvpn user To avoid conflicts with other users, create a new user for the VPN service and set a password for this user. In my case the user is called \u00abopenvpn\u00bb. # adduser \u00abopenvpn\u00bb # passwd \u00abopenvpn\u00bb # sudo usermod -a -G sudo \u00abopenvpn\u00bb # mkdir /home/\u00abopenvpn\u00bb # chown /home/openvpn \u00abopenvpn\u00bb # chgrp /home/openvpn \u00abopenvpn\u00bb Log in as \u00abopenvpn\u00bb. su - \u00abopenvpn\u00bb Run the PiVPN install script curl -L install.pivpn.io > pivpn.sh chmod +x pivpn.sh Once you are sure the script is not harmful in any way, run the installation script. # ./pivpn.sh Confirm the current network settings and make sure the shown IP address (eg. 192.168.2.110) is always assigned to this device by the router. Choose the user \u00abopenvpn\u00bb. When asked, select UDP as a protocol. Confirm the default OpenVPN port 1194. Select ECDSA encryption strength. (Recommended: 256-bit) If you use DNS, enter the domain name. Reboot after the installation has finished Add clients To generate a client configuration, use: pivpn add Select a different username and password for each client. Copy the resulting ovpn file to your client device via scp and use it in your OpenVPN client.","title":"OpenVPN on a Raspberry Pi"},{"location":"Raspberry_Pi/openvpn/#openvpn-on-a-raspberry-pi","text":"( source )","title":"OpenVPN on a Raspberry Pi"},{"location":"Raspberry_Pi/openvpn/#create-an-openvpn-user","text":"To avoid conflicts with other users, create a new user for the VPN service and set a password for this user. In my case the user is called \u00abopenvpn\u00bb. # adduser \u00abopenvpn\u00bb # passwd \u00abopenvpn\u00bb # sudo usermod -a -G sudo \u00abopenvpn\u00bb # mkdir /home/\u00abopenvpn\u00bb # chown /home/openvpn \u00abopenvpn\u00bb # chgrp /home/openvpn \u00abopenvpn\u00bb Log in as \u00abopenvpn\u00bb. su - \u00abopenvpn\u00bb","title":"Create an openvpn user"},{"location":"Raspberry_Pi/openvpn/#run-the-pivpn-install-script","text":"curl -L install.pivpn.io > pivpn.sh chmod +x pivpn.sh Once you are sure the script is not harmful in any way, run the installation script. # ./pivpn.sh Confirm the current network settings and make sure the shown IP address (eg. 192.168.2.110) is always assigned to this device by the router. Choose the user \u00abopenvpn\u00bb. When asked, select UDP as a protocol. Confirm the default OpenVPN port 1194. Select ECDSA encryption strength. (Recommended: 256-bit) If you use DNS, enter the domain name. Reboot after the installation has finished","title":"Run the PiVPN install script"},{"location":"Raspberry_Pi/openvpn/#add-clients","text":"To generate a client configuration, use: pivpn add Select a different username and password for each client. Copy the resulting ovpn file to your client device via scp and use it in your OpenVPN client.","title":"Add clients"},{"location":"Raspberry_Pi/setup_sdcard_headless/","text":"Raspberry Pi Setup Guide ( source ) This guide describes the installation of Raspbian on a Raspberry Pi 3B+ as a headless server. Download Raspbian Image The latest Raspbian image can be downloaded from https://www.raspberrypi.org/downloads/raspbian/. In this case no desktop environment is needed so we use Raspbian Stretch Lite . Extract the zip file by running the following command with adjusted date: unzip 2018-11-13-raspbian-stretch-lite.zip rm 2018-11-13-raspbian-stretch-lite.zip Write the image to the SD card Run lsblk before and after inserting the SD card into the SD card reader in order to determine the NAME of the SD card. The device should be listed as sdX where X is a lower-case letter indicating the device. If any partitions on the SD card are currently mounted (check the rightmost column of lsblk ), unmount all of them. umount /dev/sdX1 Write the image to the SD card with dd . if= specifies the image as the source file and of= specifies the SD card as the destination. Make sure to use the correct device to avoid data loss. The destination is specified by device name, not by partition name. # dd bs=4M if=2018-11-13-raspbian-stretch-lite.img of=/dev/sdX status=progress conv=fsync If any errors occur, try block size 1M instead of 4M Optional: Checking whether the image was written correctly The output of the dd command shows a number of written records ( xxx+0 records in ). Use this record count to copy the image back from the SD card to your local drive. # dd bs=4M if=/dev/sdX of=from-sd-card.img status=progress count=xxx Truncate the new image to the size of the original image and compare the new image with the original one. # truncate --reference 2018-11-13-raspbian-stretch-lite.img from-sd-card.img diff -s from-sd-card.img 2018-11-13-raspbian-stretch-lite.img Eject the SD card Flush the write cache. sync Remove the SD card from the card reader. Enable ssh for headless systems Insert the SD card into the card reader. It will be mounted by defalt. Navigate to the boot partition of the SD card and create an empty file named ssh . The mountpoint of the boot partition can be determined via lsblk . cd /run/media/$USER/boot touch ssh Enable WIFI for headless systems ( source ) Insert the SD card into the card reader. It will be mounted by defalt. Navigate to the boot partition of the SD card. The mountpoint of the boot partition can be determined via lsblk . cd /run/media/$USER/boot Create a file named wpa_supplicant.conf with the following content: ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 country=\u00abyour_ISO-3166-1_two-letter_country_code\u00bb network={ ssid=\"\u00abyour_SSID\u00bb\" psk=\"\u00abyour_PSK\u00bb\" key_mgmt=WPA-PSK } Replace \u00abyour_ISO-3166-1_two-letter_country_code\u00bb with your ISO Country Code , \u00abyour_SSID\u00bb with the SSID of your network and \u00abyour_PSK\u00bb with the corresponding wifi password. Connect to the Raspberry Pi ( source ) Establish an ssh connection to the Raspberry Pi with default credentials: User: pi Password: raspberry ssh pi@raspberrypi If this does not initialize a connection, find out the IP either by running nmap -p 22 \u00absubnet mask\u00bb on your local subnet or finding the device in the router's DHCP table. You can now change the host name if you want. Replace raspberrypi by the new name in the following two files and reboot. # vim /etc/hostname # vim /etc/hosts # reboot Remove the message of the day # echo \"\" > /etc/motd Secure login and permissions If needed, configure the Raspberry Pi via the configuration script. # raspi-config Change the default root password. # passwd root Now create a new user for ssh access and allow sudo access for the new account. Don't remove sudo access for pi immediately. You can remove it once you have tested sudo with the new user account. # adduser \u00abuser\u00bb # usermod -a -G sudo \u00abuser\u00bb If you have sudo access with your new account, remove the default user pi. # deluser -remove-home pi For further ssh setup instructions visit Securing SSH Guide","title":"Raspberry Pi Setup Guide"},{"location":"Raspberry_Pi/setup_sdcard_headless/#raspberry-pi-setup-guide","text":"( source ) This guide describes the installation of Raspbian on a Raspberry Pi 3B+ as a headless server.","title":"Raspberry Pi Setup Guide"},{"location":"Raspberry_Pi/setup_sdcard_headless/#download-raspbian-image","text":"The latest Raspbian image can be downloaded from https://www.raspberrypi.org/downloads/raspbian/. In this case no desktop environment is needed so we use Raspbian Stretch Lite . Extract the zip file by running the following command with adjusted date: unzip 2018-11-13-raspbian-stretch-lite.zip rm 2018-11-13-raspbian-stretch-lite.zip","title":"Download Raspbian Image"},{"location":"Raspberry_Pi/setup_sdcard_headless/#write-the-image-to-the-sd-card","text":"Run lsblk before and after inserting the SD card into the SD card reader in order to determine the NAME of the SD card. The device should be listed as sdX where X is a lower-case letter indicating the device. If any partitions on the SD card are currently mounted (check the rightmost column of lsblk ), unmount all of them. umount /dev/sdX1 Write the image to the SD card with dd . if= specifies the image as the source file and of= specifies the SD card as the destination. Make sure to use the correct device to avoid data loss. The destination is specified by device name, not by partition name. # dd bs=4M if=2018-11-13-raspbian-stretch-lite.img of=/dev/sdX status=progress conv=fsync If any errors occur, try block size 1M instead of 4M","title":"Write the image to the SD card"},{"location":"Raspberry_Pi/setup_sdcard_headless/#optional-checking-whether-the-image-was-written-correctly","text":"The output of the dd command shows a number of written records ( xxx+0 records in ). Use this record count to copy the image back from the SD card to your local drive. # dd bs=4M if=/dev/sdX of=from-sd-card.img status=progress count=xxx Truncate the new image to the size of the original image and compare the new image with the original one. # truncate --reference 2018-11-13-raspbian-stretch-lite.img from-sd-card.img diff -s from-sd-card.img 2018-11-13-raspbian-stretch-lite.img","title":"Optional: Checking whether the image was written correctly"},{"location":"Raspberry_Pi/setup_sdcard_headless/#eject-the-sd-card","text":"Flush the write cache. sync Remove the SD card from the card reader.","title":"Eject the SD card"},{"location":"Raspberry_Pi/setup_sdcard_headless/#enable-ssh-for-headless-systems","text":"Insert the SD card into the card reader. It will be mounted by defalt. Navigate to the boot partition of the SD card and create an empty file named ssh . The mountpoint of the boot partition can be determined via lsblk . cd /run/media/$USER/boot touch ssh","title":"Enable ssh for headless systems"},{"location":"Raspberry_Pi/setup_sdcard_headless/#enable-wifi-for-headless-systems","text":"( source ) Insert the SD card into the card reader. It will be mounted by defalt. Navigate to the boot partition of the SD card. The mountpoint of the boot partition can be determined via lsblk . cd /run/media/$USER/boot Create a file named wpa_supplicant.conf with the following content: ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 country=\u00abyour_ISO-3166-1_two-letter_country_code\u00bb network={ ssid=\"\u00abyour_SSID\u00bb\" psk=\"\u00abyour_PSK\u00bb\" key_mgmt=WPA-PSK } Replace \u00abyour_ISO-3166-1_two-letter_country_code\u00bb with your ISO Country Code , \u00abyour_SSID\u00bb with the SSID of your network and \u00abyour_PSK\u00bb with the corresponding wifi password.","title":"Enable WIFI for headless systems"},{"location":"Raspberry_Pi/setup_sdcard_headless/#connect-to-the-raspberry-pi","text":"( source ) Establish an ssh connection to the Raspberry Pi with default credentials: User: pi Password: raspberry ssh pi@raspberrypi If this does not initialize a connection, find out the IP either by running nmap -p 22 \u00absubnet mask\u00bb on your local subnet or finding the device in the router's DHCP table. You can now change the host name if you want. Replace raspberrypi by the new name in the following two files and reboot. # vim /etc/hostname # vim /etc/hosts # reboot Remove the message of the day # echo \"\" > /etc/motd","title":"Connect to the Raspberry Pi"},{"location":"Raspberry_Pi/setup_sdcard_headless/#secure-login-and-permissions","text":"If needed, configure the Raspberry Pi via the configuration script. # raspi-config Change the default root password. # passwd root Now create a new user for ssh access and allow sudo access for the new account. Don't remove sudo access for pi immediately. You can remove it once you have tested sudo with the new user account. # adduser \u00abuser\u00bb # usermod -a -G sudo \u00abuser\u00bb If you have sudo access with your new account, remove the default user pi. # deluser -remove-home pi For further ssh setup instructions visit Securing SSH Guide","title":"Secure login and permissions"},{"location":"SSH/secure_setup/","text":"Secure SSH setup Use key-based login Copy your public key from the client machine to the server. Run the following command on the client: ssh-copy-id -i ~/.ssh/my_key user@server","title":"Secure SSH setup"},{"location":"SSH/secure_setup/#secure-ssh-setup","text":"","title":"Secure SSH setup"},{"location":"SSH/secure_setup/#use-key-based-login","text":"Copy your public key from the client machine to the server. Run the following command on the client: ssh-copy-id -i ~/.ssh/my_key user@server","title":"Use key-based login"},{"location":"SSH/secure_ssh/","text":"TODO ssh-copy-id -i ~/.ssh/\u00abkey\u00bb \u00abuser\u00bb@\u00abhostname\u00bb /etc/ssh/sshd_config PasswordAuthentication no ChallengeResponseAuthentication no UsePAM no # service ssh restart","title":"TODO"},{"location":"SSH/secure_ssh/#todo","text":"ssh-copy-id -i ~/.ssh/\u00abkey\u00bb \u00abuser\u00bb@\u00abhostname\u00bb /etc/ssh/sshd_config PasswordAuthentication no ChallengeResponseAuthentication no UsePAM no # service ssh restart","title":"TODO"}]}